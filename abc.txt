复习：
------------------------
1. 获取或设置属性节点的值
	操作标签属性
		1. getAttribute(attrName)
				作用 ： 获取指定属性的值
				attrName : 属性名
		2. setAttribute(attrName,value)
				作用 ：设置属性和对应的值
				attrName : 属性名
				value ：属性值
		3. removeAttribute(attrName)
				作用 ：移除指定属性
				attrName : 属性名
		4. 可以使用点语法访问元素节点的属性
				元素节点.属性名
				et :
					h1.id
					input.value
			练习 ：
				1. 创建超链接，链接地址为百度
				2. 创建按钮，点击时修改超链接的链接地址
						改为 http://www.tmooc.cn
2. 操作元素样式
	1. setAttribute()
		  可以设置元素 class / id 的属性值，对应选择器
	2. 针对类选择器的样式，可以为元素属性className赋值
		  元素.className = "";
	3. 使用内联方式添加样式
		  <h1 style="color:red;"></h1>
		  元素.style.css属性名
		  元素.style.css属性名 = "";
		  注意 ：
				如果CSS属性名中有连接符 - ，在JS中访问时一律
				改成驼峰标识：
					font-size 在JS中 使用 fontSize
					background-color  backgroundColor
			练习 ：
				1. 创建div 按钮 输入框
				2. 验证输入内容是否为数字，
				    如果是数字视为通过，在div中显示绿色的
					文本"用户名合法"
					如果不合法，div中显示红色文本“用户名不合法”
3. DOM节点操作
	操作节点
		1. 创建元素节点和文本节点
			语法 ：
				元素节点 : var div = document.createElement('div');
			注意 ：
				属性节点可以通过元素节点的点语法直接访问和设置
			练习 ：
				使用JS创建div元素节点，
				设置div的id为div1
				设置div的文本为“动态创建的div”
				控制台输出div
		2. 添加节点
			DOM中对节点的插入 删除 追加操作，都由父元素执行
			1. 在父元素中动态追加子节点
					语法 ：
							父节点.appendChild(子节点);
							et :
								var div = document.createElement('div');
								//将div追加到body中
								document.body.appendChild(div);
								div.parentNode.append(div);
					注意 ：文本节点也是元素的子节点
							et :
								var text = document.createTextNode('hello');
								//追加到div中显示
								div.appendChild(text);
			2. 在文档的指定位置插入节点
					语法 ：
						parentNode.insertBefore(newElem,oldElem);
						将newElem节点插入到oldElem节点之前
							et:
								var h1 = document.createElement('h1');
								//将h1插入在div之前
								document.body.insertBefore(h1,div);
		3. 删除节点
			1. 如果是删除body的子元素
					document.body.removeChild(elem);
			2. 如果元素层级结构较多，就需要通过父节点parentNode
			执行删除操作
					parentNode.removeChild(elem);
			作业 ：
				1. 上方包含三个输入框，一个添加按钮
				2. 下方为商品信息展示区域，点击添加之后,将商品信息显示在当前区域
				3. JS动态创建节点并显示（商品信息展示）
4. 事件
	1. 事件 ： 由用户行为激发的操作
	2. 事件处理函数(都以on为前缀)
			1. 鼠标事件
				onclick   鼠标单击事件
				ondbclick 鼠标双击事件
				onmouseover 鼠标移入元素时触发
				onmouseout  鼠标移出元素时触发
				onmousemove 鼠标在元素内移动时触发
			2. onload 事件
				文档或元素加载完毕之后触发
			3. 状态改变事件
				常用于表单控件
				onfocus	元素获取焦点时触发
				onblur	元素失去焦点时触发
				onchange 元素内容发生改变时触发，在元素失去焦点之后才触发
				oninput	 元素的value值发生变化时触发，实时监听输入
				onsubmit 当表单被提交时触发
	3. 事件的绑定方式
			1. 内联方式 ：在标签中绑定事件函数
				<button onclick="执行函数()"></button>
			2. 在JS中动态绑定事件处理函数
				语法 ：
						元素节点.事件函数名 = function (){};
					et :
						div.onclick = function () {
							执行函数
						};
			3. W3C标准事件监听函数
					elem.addEventListener('click',fun);
					elem.removeEventListener();
			4. this关键字
					this表示触发当前事件的元素节点对象，
					用在事件函数内部
						div.onclick = function (){
							console.log(this); //div
					};
				练习 ：
					1. 创建div标签
					2. JS中获取div
					3. 为div添加点击事件，实现点击时出现对话框
5. 事件行为
	1. onload事件
		 常用于为body绑定load事件，表示等待body内容加载完毕再
		 执行事件函数
		 et :
				<body onload = "fun();"></body>
				//JS动态绑定
				window.onload = function () {
					//等待文档加载完毕之后再执行
				};
	2. onsubmit事件
		只有在表单提交时才触发
			注意 ：该事件需要一个Boolean返回值来通知表单是否
				   要提交，返回true表示表单可以提交，
				   返回false表示阻止表单提交
		常用于验证表单是否可以提交
6. 事件对象
	1. 事件对象 event 
		伴随事件触发产生，包含了当前事件所有的信息
	2. 获取事件对象
		由于事件对象伴随事件触发自动产生，浏览器会
		自动将其作为参数传递给事件处理函数，所以我们
		需要在事件处理函数出接收参数，就可以获取事件对象
			et:
					div.onclick = function (evt) {
							console.log(evt);
					};
7. 事件传递机制
	1. 事件传递 ：
		当页面一个元素触发事件时，其他相关的元素都会接收这个
		事件，都可以选择对事件作出响应
	2. 事件传递机制 ：
		事件传递机制描述的是页面中元素处理事件的顺序，
				从里向外逐个触发（默认传递方式）
				该事件只在当前元素中执行，不向上传递
				evt.stopPropagation(); (默认冒泡情况下)
                 jQuery
8. jQuery介绍
	jQuery是一个JavaScript的库，通过封装
	原生的JavaScript，得到一整套定义好的方法，
	简化JS操作
	Write Less ，Do More
	jQuery版本 ：
	jQuery 1.xx.x 版本，兼容IE 6,7,8
	jQuery 2.xx.x 版本，不再兼容IE 6,7,8
9. jQuery的功能和优势
	1. 简化DOM操作，像操作CSS一样去操作DOM
	2. 直接通过选择器设置元素样式
	3. 简化JS的代码操作 （链式调用）
	4. 事件的处理更加容易
	-------------------------
	5. 各种动画效果使用更加方便
	6. 让Ajax技术更完美
	7. 基于jQuery有大量方便的插件
	8. 自行扩展功能插件
10. jQuery使用
	1. 引入jQuery文件
		1. 本地文件引入
			<script src=""></script>
		2. 网络文件引入
			<script src="url"></script>
			注意 ：如果想使用jQuery语法操作JS，必须将jQuery
			引入放在JS代码之前
11. jQuery 使用
		1. jQuery 对象 - jQuery/$
			jQuery对象是对DOM对象封装之后产生的对象
			jQuery对象只能操作jQuery提供的方法，DOM对象也
			只能操作原生JS提供的方法，不能混用
		2. 工厂函数 - $()
			如果想要获取元素对象，必须通过工厂函数
			函数中可以传递参数 ：选择器/DOM对象
		3. jQuery对象与DOM对象互相转换
			1. DOM 转换为 jQuery 对象
				var h1 = document.getElementsByTagName('h1')[0];
				var $h1 = $(h1);
			2. jQuery 转换为 DOM
				var h1 = $h1[0];
				var h1 = $h1.get(0);
12. jQuery选择器
		1. 作用 
			根据选择器获取页面中的元素，返回值都是
			由jQuery对象组成的数组
		2. 语法 ：
			$('选择器')
		3. 常用选择器
			1. 基础选择器
					1. ID选择器
							$('#id');
							返回id属性值为指定id的元素对象
					2. 类选择器
							$(".className");
							返回指定类名对象的元素
					3. 标签选择器
							$('element');
							返回指定标签名对应的元素
					4. 群组选择器
							$('selector1,selector2,...');
			2. 层级选择器
					1. 后代选择器
							$('selector1 selector2')
					2. 子代选择器
							$('selector1>selector2')
					3. 相邻兄弟选择器
							$('selector1+selector2')
							匹配紧跟在selector1后满足selector2的元素
							h1+p
					4. 通用兄弟选择器
							$('selector1~selector2')
							匹配selector1后所有满足selector2的元素
			3. 基本过滤选择器
					过滤选择器需要结合其他选择器一起使用
					1. :first
							只匹配一组元素中的第一个元素
							$('p:first')
					2. :last
							匹配一组元素中的最后一个元素
							$('p:last')
					3. :not
							否定筛选，将满足selector选择器的元素都排除在外
							匹配剩余元素
							$(':not(p,h1)')
					4. :odd
							匹配偶数行对应的元素 （奇数下标）
					5. :even
							匹配奇数行对应的元素
					6. :eq(index)
							匹配下标等于index的元素
					7. :gt(index)
							匹配下标大于index的元素
					8. :lt(index)
							匹配下标小于index的元素
			4. 属性选择器 []
					根据标签属性匹配元素
					1. [attribute]
							匹配包含指定属性的元素
					2. [attribute=value]
							匹配属性attribute=value的元素
					3. [attribute!=value]
							匹配attribute属性值不等于value的元素
					4. [attribute^=value]
							匹配属性值以value字符开头的元素
					5. [attribute$=value]
							匹配属性值以value字符结尾的元素
					6. [attribute*=value]
							匹配属性值中包含value字符的元素
			5. 子元素过滤选择器
					1. :first-child
							匹配属于其父元素中的首个子元素
					2. :last-child
							匹配属于其父元素中的最后一个子元素
					3. :nth-child(n)
							匹配属于其父元素中的第n个子元素
					注意 ：
						将要匹配的子元素与筛选选择器相结合使用
